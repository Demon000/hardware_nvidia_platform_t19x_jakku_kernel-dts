/*
 * Copyright (c) 2018-2020, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <dt-bindings/media/camera.h>

#define BROKEN_I2C_FIX
#define GMSL_CAMERA_NUM	2
#define GMSL_CAMERA_1
#if (GMSL_CAMERA_NUM >= 2)
#define GMSL_CAMERA_2
#endif
#define GMSL_VC

/ {
	tegra-capture-vi  {
		num-channels = <GMSL_CAMERA_NUM>;

		ports {
			#address-cells = <1>;
			#size-cells = <0>;

			port@0 {
				reg = <0>;

				vi_in0: endpoint {
#if defined(GMSL_VC)
					vc-id = <0>;
#endif
					port-index = <0>;
					bus-width = <2>;
					remote-endpoint = <&csi_out0>;
				};
			};

#if defined(GMSL_CAMERA_2)
			port@1 {
				reg = <1>;

				vi_in1: endpoint {
#if defined(GMSL_VC)
					vc-id = <1>;
#endif
					port-index = <0>;
					bus-width = <2>;
					remote-endpoint = <&csi_out1>;
				};
			};
#endif
		};
	};

	host1x@13e00000 {
		nvcsi@15a00000 {
			num-channels = <GMSL_CAMERA_NUM>;

			#address-cells = <1>;
			#size-cells = <0>;

			channel@0 {
				reg = <0>;

				ports {
					#address-cells = <1>;
					#size-cells = <0>;

					port@0 {
						reg = <0>;

						csi_in0: endpoint@0 {
							port-index = <0>;
							bus-width = <2>;
							remote-endpoint = <&max96712_out0>;
						};
					};

					port@1 {
						reg = <1>;

						csi_out0: endpoint@1 {
							remote-endpoint = <&vi_in0>;
						};
					};
				};
			};

#if defined(GMSL_CAMERA_2)
			channel@1 {
				reg = <1>;

				ports {
					#address-cells = <1>;
					#size-cells = <0>;

					port@0 {
						reg = <0>;

						csi_in1: endpoint@2 {
							port-index = <0>;
							bus-width = <2>;
							remote-endpoint = <&max96712_out1>;
						};
					};

					port@1 {
						reg = <1>;

						csi_out1: endpoint@3 {
							remote-endpoint = <&vi_in1>;
						};
					};
				};
			};
#endif
		};
	};

#if defined(BROKEN_I2C_FIX)
	i2c@c240000 {
#else
	cam_i2cmux {
		i2c_0: i2c@0 {
#endif

			gmsl-deserializer@27 {
				compatible = "maxim,max96712";
				reg = <0x27>;

				max,skip-subdev-s-stream;

				i2c-mux {
					i2c@2 {
						reg = <2>;

						gmsl-serializer@40 {
							compatible = "maxim,max96717";
							reg = <0x40>;

							max,skip-subdev-s-stream;

							nv,skip-notifier;
							nv,skip-link;

							ports {
								#address-cells = <1>;
								#size-cells = <0>;

								port@1 {
									reg = <1>;

									max96717_in0: endpoint {
										remote-endpoint = <&ox03a_out0>;
									};
								};

								port@3 {
									reg = <3>;

									max96717_out0: endpoint {
										remote-endpoint = <&max96712_in0>;
										port-index = <0>;
									};
								};
							};
						};

						ox03a_a@36 {
							compatible = "ov,ox03a";
							reg = <0x36>;

							nv,skip-notifier;
							nv,skip-link;

							devnode = "video0";

							physical_w = "3.680";
							physical_h = "2.760";

							sensor_model = "ox03a";

							use_sensor_mode_id = "true";

							mode0 {
								mclk_khz = "25000";
								num_lanes = "2";
								tegra_sinterface = "serial_a";
								phy_mode = "DPHY";
								discontinuous_clk = "no";
								dpcm_enable = "false";
								cil_settletime = "0";

								active_w = "1920";
								active_h = "1280";
								mode_type = "bayer";
								pixel_phase = "bggr";
								csi_pixel_bit_depth = "12";
								readout_orientation = "0";
								line_length = "1920";
								inherent_gain = "1";
								mclk_multiplier = "10";
								pix_clk_hz = "250000000";

								gain_factor = "16";
								framerate_factor = "1000000";
								exposure_factor = "1000000";
								min_gain_val = "16"; /* 1.00x */
								max_gain_val = "170"; /* 10.66x */
								step_gain_val = "1";
								default_gain = "16"; /* 1.00x */
								min_hdr_ratio = "1";
								max_hdr_ratio = "1";
								min_framerate = "2000000"; /* 2.0 fps */
								max_framerate = "30000000"; /* 30.0 fps */
								step_framerate = "1";
								default_framerate = "30000000"; /* 21.0 fps */
								min_exp_time = "13"; /* us */
								max_exp_time = "683709"; /* us */
								step_exp_time = "1";
								default_exp_time = "2495"; /* us */

								embedded_metadata_height = "0";
							};

							ports {
								#address-cells = <1>;
								#size-cells = <0>;
								port@0 {
									reg = <0>;
									ox03a_out0: endpoint {
#if defined(GMSL_VC)
										vc-id = <0>;
#endif
										port-index = <0>;
										bus-width = <4>;
										data-lanes = <1 2 3 4>;
										remote-endpoint = <&max96717_in0>;
									};
								};
							};
						};
					};

#if defined(GMSL_CAMERA_2)
					i2c@3 {
						reg = <3>;

						gmsl-serializer@40 {
							compatible = "maxim,max96717";
							reg = <0x40>;

							max,skip-subdev-s-stream;

							nv,skip-notifier;
							nv,skip-link;

							ports {
								#address-cells = <1>;
								#size-cells = <0>;

								port@1 {
									reg = <1>;

									max96717_in1: endpoint {
										remote-endpoint = <&ox03a_out1>;
									};
								};

								port@3 {
									reg = <3>;

									max96717_out1: endpoint {
										remote-endpoint = <&max96712_in1>;
										port-index = <0>;
									};
								};
							};
						};


						ox03a_b@36 {
							compatible = "ov,ox03a";
							reg = <0x36>;

							nv,skip-notifier;
							nv,skip-link;

							devnode = "video1";

							physical_w = "3.680";
							physical_h = "2.760";

							sensor_model = "ox03a";

							use_sensor_mode_id = "true";

							mode0 { /* OX03A_MODE_1920x1280_30FPS */
								mclk_khz = "25000";
								num_lanes = "2";
								tegra_sinterface = "serial_a";
								phy_mode = "DPHY";
								discontinuous_clk = "no";
								dpcm_enable = "false";
								cil_settletime = "0";

								active_w = "1920";
								active_h = "1280";
								mode_type = "bayer";
								pixel_phase = "bggr";
								csi_pixel_bit_depth = "12";
								readout_orientation = "0";
								line_length = "1920";
								inherent_gain = "1";
								mclk_multiplier = "10";
								pix_clk_hz = "250000000";

								gain_factor = "16";
								framerate_factor = "1000000";
								exposure_factor = "1000000";
								min_gain_val = "16"; /* 1.00x */
								max_gain_val = "170"; /* 10.66x */
								step_gain_val = "1";
								default_gain = "16"; /* 1.00x */
								min_hdr_ratio = "1";
								max_hdr_ratio = "1";
								min_framerate = "2000000"; /* 2.0 fps */
								max_framerate = "30000000"; /* 30.0 fps */
								step_framerate = "1";
								default_framerate = "30000000"; /* 21.0 fps */
								min_exp_time = "13"; /* us */
								max_exp_time = "683709"; /* us */
								step_exp_time = "1";
								default_exp_time = "2495"; /* us */

								embedded_metadata_height = "0";
							};

							ports {
								#address-cells = <1>;
								#size-cells = <0>;
								port@0 {
									reg = <0>;
									ox03a_out1: endpoint {
#if defined(GMSL_VC)
										vc-id = <1>;
#endif
										port-index = <0>;
										bus-width = <4>;
										data-lanes = <1 2 3 4>;
										remote-endpoint = <&max96717_in1>;
									};
								};
							};
						};
					};
#endif
				};

				channel@2 {
					reg = <2>;

					ports {
						#address-cells = <1>;
						#size-cells = <0>;

						port@0 {
							reg = <0>;

							max96712_out0: endpoint {
								remote-endpoint = <&csi_in0>;
								port-index = <0>;
								clock-lanes = <0>;
								data-lanes = <1 2>;
								clock-noncontinuous;
							};
						};

						port@1 {
							reg = <1>;

							max96712_in0: endpoint {
								remote-endpoint = <&max96717_out0>;
							};
						};
					};
				};

#if defined(GMSL_CAMERA_2)
				channel@3 {
					reg = <3>;

					ports {
						#address-cells = <1>;
						#size-cells = <0>;

						port@0 {
							reg = <0>;

							max96712_out1: endpoint {
								remote-endpoint = <&csi_in1>;
								port-index = <0>;
								clock-lanes = <0>;
								data-lanes = <1 2>;
								clock-noncontinuous;
							};
						};

						port@1 {
							reg = <1>;

							max96712_in1: endpoint {
								remote-endpoint = <&max96717_out1>;
							};
						};
					};
				};
#endif
			};

#if !defined(BROKEN_I2C_FIX)
		};
#endif
	};
};
/ {
	tcp: tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";
		/**
		* Physical settings to calculate max ISO BW
		*
		* num_csi_lanes = <>;
		* Total number of CSI lanes when all cameras are active
		*
		* max_lane_speed = <>;
		* Max lane speed in Kbit/s
		*
		* min_bits_per_pixel = <>;
		* Min bits per pixel
		*
		* vi_peak_byte_per_pixel = <>;
		* Max byte per pixel for the VI ISO case
		*
		* vi_bw_margin_pct = <>;
		* Vi bandwidth margin in percentage
		*
		* max_pixel_rate = <>;
		* Max pixel rate in Kpixel/s for the ISP ISO case
		*
		* isp_peak_byte_per_pixel = <>;
		* Max byte per pixel for the ISP ISO case
		*
		* isp_bw_margin_pct = <>;
		* Isp bandwidth margin in percentage
		*/
		num_csi_lanes = <2>;
		max_lane_speed = <1500000>;
		min_bits_per_pixel = <10>;
		vi_peak_byte_per_pixel = <2>;
		vi_bw_margin_pct = <25>;
		max_pixel_rate = <240000>;
		isp_peak_byte_per_pixel = <5>;
		isp_bw_margin_pct = <25>;

		/**
		 * The general guideline for naming badge_info contains 3 parts, and is as follows,
		 * The first part is the camera_board_id for the module; if the module is in a FFD
		 * platform, then use the platform name for this part.
		 * The second part contains the position of the module, ex. "rear" or "front".
		 * The third part contains the last 6 characters of a part number which is found
		 * in the module's specsheet from the vendor.
		 */
		modules {
			module0 {
				badge = "jakku_front_RBP1941";
				position = "front";
				orientation = "1";
				drivernode0 {
					pcl_id = "v4l2_sensor";
#if defined(BROKEN_I2C_FIX)
					devname = "ox03a 1-0037";
					proc-device-tree = "/proc/device-tree/i2c@c240000/ox03a_a@37";
#else
					devname = "ox03a 9-0037";
					proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@0/ox03a_a@37";
#endif
				};
			};

#if defined(GMSL_CAMERA_2)
			module1 {
				badge = "jakku_front_RBP1942";
				position = "front";
				orientation = "1";
				drivernode0 {
					pcl_id = "v4l2_sensor";
#if defined(BROKEN_I2C_FIX)
					devname = "ox03a 1-0038";
					proc-device-tree = "/proc/device-tree/i2c@c240000/ox03a_b@38";
#else
					devname = "ox03a 9-0038";
					proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@0/ox03a_b@38";
#endif
				};
			};
#endif
		};
	};
};
